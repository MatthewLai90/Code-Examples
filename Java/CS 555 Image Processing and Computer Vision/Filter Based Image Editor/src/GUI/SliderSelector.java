/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package GUI;

import UsefulFilters.ImageScale;
import ImageProcessor.ImageUtilities;
import Utilities.RGBPixelArray;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;

/**
 *
 * @author Matthew Lai
 */
public class SliderSelector extends javax.swing.JDialog {

    int oWidth;
    int oHeight;
    Utilities.RGBPixelArray scaledImage;
    Utilities.RGBPixelArray originalImage;
    int RES_MIN = 80;
    int RES_MAX = 640;
    int RES_INIT = oWidth;
    ImageScale parentFilter;
    double ratio;
    
    /**
     * Creates new form SliderSelector
     */
//    public SliderSelector(java.awt.Frame parent, boolean modal) {
//        super(parent, modal);
//        initComponents();
//    }
    
    private int getRESINIT() { return RES_INIT; }
    
    public int getSliderValue()
    {
        return resolution.getValue();
    }
    
    private void repaintImage()
    {
//        jScrollPane2 = GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(scaledImage));
//        jScrollPane2.repaint();
//        this.repaint();
//        JImageScrollPane jISP = new JImageScrollPane(GUIUtilities.getImagePanel(scaledImage));
//        paintPanel = new JPanel(new FlowLayout());
//        paintPanel.add(GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(scaledImage)));
//        paintPanel.repaint();
//        paintPanel.setVisible(true);
//        ((JImageScrollPane)paintScrollPane).getImagePanel().getGraphics().drawImage(ImageUtilities.getBufferedImage(scaledImage), 0, 0, null);
//        ((JImageScrollPane)paintScrollPane).getImagePanel().repaint();
        paintScrollPane.getImagePanel().changeImage(scaledImage);
        paintScrollPane.repaint();
    }
    
    public SliderSelector(Utilities.RGBPixelArray original, ImageScale parentFilter) {
        super();
        this.parentFilter = parentFilter;
        originalImage = original;
        oWidth = original.getWidth();
        oHeight = original.getLength();
        ratio = (double)oHeight/oWidth;
//        scaledImage = new int[original.getWidth()][original.getLength()];
//        for (int i = 0; i < original.getWidth(); i++) {
//            for (int j = 0; j < original.getLength(); j++) {
//                scaledImage[i][j] = original[i][j];
//            }
//        }
        scaledImage = new RGBPixelArray(original);
        
        if(oWidth > RES_MAX) RES_INIT = RES_MAX;
        
        initComponents();
        
        resolution.setValue(RES_INIT);
        repaintImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resolution = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resDisp = new javax.swing.JTextPane();
        paintScrollPane = GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(scaledImage));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preview Image");
        setAlwaysOnTop(true);
        setModal(true);
        setName("ResolutionSlider"); // NOI18N
        setResizable(false);

        resolution.setMajorTickSpacing(80);
        resolution.setMaximum(640);
        resolution.setMinimum(80);
        resolution.setMinorTickSpacing(10);
        resolution.setPaintTicks(true);
        resolution.setSnapToTicks(true);
        resolution.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                resolutionStateChanged(evt);
            }
        });

        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        resDisp.setText(resolution.getValue() + " by " + Math.round(resolution.getValue()*ratio));
        resDisp.setEditable(false);
        jScrollPane1.setViewportView(resDisp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(167, 167, 167))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resolution, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addComponent(paintScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paintScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resolutionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resolutionStateChanged
        resDisp.setText(resolution.getValue() + " by " + Math.round(resolution.getValue()*ratio));
        scaledImage = parentFilter.scaleImage(originalImage, resolution.getValue(), true);
        repaintImage();
        
    }//GEN-LAST:event_resolutionStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private GUI.JImageScrollPane paintScrollPane;
    private javax.swing.JTextPane resDisp;
    private javax.swing.JSlider resolution;
    // End of variables declaration//GEN-END:variables
}
