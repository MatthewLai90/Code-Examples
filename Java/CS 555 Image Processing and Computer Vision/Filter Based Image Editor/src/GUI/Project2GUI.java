/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import ImageProcessor.ImageUtilities;
import Utilities.OpenCV;
import Utilities.RGBPixelArray;
import P2Filters.Project2;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.MouseEvent;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;

/**
 *
 * @author Matthew Lai
 */
public class Project2GUI extends javax.swing.JDialog {

    RGBPixelArray foundMap;
    final RGBPixelArray idealMap;
    RGBPixelArray original;
    int[][] filteredImg;
    boolean set;
    public Project2GUI(java.awt.Frame parent, boolean modal, RGBPixelArray image) {
        super(parent, modal);
        set = true;
        original = image;
        java.io.File idealFile = GUIUtilities.getImageFileDialog(this, "Select Human Segmented Image");
        System.out.println(idealFile);
        filteredImg = Project2.roberts(OpenCV.convertGS2Mat(image));
        filteredImg = ImageUtilities.normalize(filteredImg, 8);
        foundMap = new RGBPixelArray(Project2.threshold(filteredImg, 40));
        idealMap = ImageUtilities.loadImage(idealFile);
        initComponents();
        updateErrorFields();
        cltField.setVisible(false);
        cltLabel.setVisible(false);
        cutField.setVisible(false);
        cutLabel.setVisible(false);
    }
    
    private void updateErrorFields()
    {
        fomField.setText(String.format("%.8s", Project2.FOM(foundMap.getGrayscaleValues(), idealMap.getGrayscaleValues(), Double.parseDouble(fomAlphaField.getText()))));
        rmsField.setText(String.format("%.8s", Project2.RMS(foundMap.getGrayscaleValues(), idealMap.getGrayscaleValues())));
    }
    
    private void updateFoundImage()
    {
        int mod = (int)(((double)thresholdSlider.getValue()/100.0)*255);
        if(robertsButton.isSelected())
        {
            filteredImg = Project2.roberts(OpenCV.convertGS2Mat(original));
            filteredImg = ImageUtilities.normalize(filteredImg, 8);
            foundMap = new RGBPixelArray(Project2.threshold(filteredImg, mod));
        }
        if(prewittsButton.isSelected())
        {
            filteredImg = Project2.prewitt(OpenCV.convertGS2Mat(original));
            filteredImg = ImageUtilities.normalize(filteredImg, 8);
            foundMap = new RGBPixelArray(Project2.threshold(filteredImg, mod));
        }
        if(LoGButton.isSelected())
        {
            filteredImg = Project2.LoG(OpenCV.convertGS2Mat(original));
            filteredImg = ImageUtilities.normalize(filteredImg, 8);
            foundMap = new RGBPixelArray(Project2.threshold(filteredImg, mod));
        }
        if(sobelButton.isSelected())
        {
            filteredImg = Project2.sobel(OpenCV.convertGS2Mat(original));
            filteredImg = ImageUtilities.normalize(filteredImg, 8);
            foundMap = new RGBPixelArray(Project2.threshold(filteredImg, mod));
        }
        if(cannyButton.isSelected())
        {
            filteredImg = Project2.canny(OpenCV.convertGS2Mat(original), Double.parseDouble(cutField.getText()),Double.parseDouble(cltField.getText()));
            foundMap = new RGBPixelArray(filteredImg);
        }
    }
    
    public RGBPixelArray finalImage()
    {
        return foundMap;
    }
    
    public boolean done()
    {
        return set;
    }
    
    private void updateThresholdImage()
    {
        int mod = (int)(((double)thresholdSlider.getValue()/100.0)*255);
        foundMap = new RGBPixelArray(Project2.threshold(filteredImg, mod));
    }
    
    private void repaintImage()
    {
        foundDisplay.getImagePanel().changeImage(foundMap);
        foundDisplay.repaint();
        updateErrorFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EDSelectionGroup = new javax.swing.ButtonGroup();
        idealDisplay = GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(idealMap));
        foundDisplay = GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(foundMap));
        LoGButton = new javax.swing.JRadioButton();
        prewittsButton = new javax.swing.JRadioButton();
        robertsButton = new javax.swing.JRadioButton();
        sobelButton = new javax.swing.JRadioButton();
        cannyButton = new javax.swing.JRadioButton();
        fomLabel = new javax.swing.JLabel();
        fomField = new javax.swing.JTextField();
        alphaLabel = new javax.swing.JLabel();
        fomAlphaField = new javax.swing.JTextField();
        rmsLabel = new javax.swing.JLabel();
        rmsField = new javax.swing.JTextField();
        doneButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        thresholdSlider = new javax.swing.JSlider();
        cutLabel = new javax.swing.JLabel();
        cltLabel = new javax.swing.JLabel();
        cutField = new javax.swing.JTextField();
        cltField = new javax.swing.JTextField();
        applyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        EDSelectionGroup.add(LoGButton);
        LoGButton.setText("LoG");
        LoGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoGButtonActionPerformed(evt);
            }
        });

        EDSelectionGroup.add(prewittsButton);
        prewittsButton.setText("Prewitts");
        prewittsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prewittsButtonActionPerformed(evt);
            }
        });

        EDSelectionGroup.add(robertsButton);
        robertsButton.setSelected(true);
        robertsButton.setText("Roberts");
        robertsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                robertsButtonActionPerformed(evt);
            }
        });

        EDSelectionGroup.add(sobelButton);
        sobelButton.setText("Sobel");
        sobelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelButtonActionPerformed(evt);
            }
        });

        EDSelectionGroup.add(cannyButton);
        cannyButton.setText("Canny");
        cannyButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cannyButtonItemStateChanged(evt);
            }
        });

        fomLabel.setText("FOM");

        fomField.setEditable(false);
        fomField.setText("jTextField1");

        alphaLabel.setText("FOM Alpha");

        fomAlphaField.setText("1");
        fomAlphaField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fomAlphaFieldFocusLost(evt);
            }
        });

        rmsLabel.setText("RMS");

        rmsField.setEditable(false);
        rmsField.setText("jTextField1");

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        thresholdSlider.setValue(40);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });
        thresholdSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                thresholdSliderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                thresholdSliderMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                thresholdSliderMouseReleased(evt);
            }
        });

        cutLabel.setText("Canny Upper Threshold");

        cltLabel.setText("Canny Lower Threshold");

        cutField.setText("30");
        cutField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cutFieldFocusLost(evt);
            }
        });

        cltField.setText("90");
        cltField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cltFieldFocusLost(evt);
            }
        });

        applyButton.setText("Apply New Settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fomLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alphaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fomAlphaField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rmsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rmsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(robertsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(prewittsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LoGButton)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(sobelButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cannyButton)
                                .addGap(30, 30, 30))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idealDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(foundDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(doneButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton))
                                    .addComponent(applyButton))
                                .addGap(123, 123, 123)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cutField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cltField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cutLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cltLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoGButton)
                            .addComponent(prewittsButton)
                            .addComponent(robertsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sobelButton)
                            .addComponent(cannyButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fomLabel)
                            .addComponent(fomField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alphaLabel)
                            .addComponent(fomAlphaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rmsLabel)
                            .addComponent(rmsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(foundDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idealDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doneButton)
                            .addComponent(cancelButton)
                            .addComponent(cutLabel)
                            .addComponent(cltLabel))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cutField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(applyButton)
                            .addComponent(cltField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prewittsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prewittsButtonActionPerformed
        updateFoundImage();
        repaintImage();
    }//GEN-LAST:event_prewittsButtonActionPerformed

    private void cannyButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cannyButtonItemStateChanged
        if(cannyButton.isSelected())
        {
            thresholdSlider.setEnabled(false);
            cltField.setVisible(true);
            cltLabel.setVisible(true);
            cutField.setVisible(true);
            cutLabel.setVisible(true);
            updateFoundImage();
            repaintImage();
        }
        else
        {
            thresholdSlider.setEnabled(true);
            cltField.setVisible(false);
            cltLabel.setVisible(false);
            cutField.setVisible(false);
            cutLabel.setVisible(false);
        }
    }//GEN-LAST:event_cannyButtonItemStateChanged

    private void LoGButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoGButtonActionPerformed
        updateFoundImage();
        repaintImage();
    }//GEN-LAST:event_LoGButtonActionPerformed

    private void sobelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelButtonActionPerformed
        updateFoundImage();
        repaintImage();
    }//GEN-LAST:event_sobelButtonActionPerformed

    private void robertsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_robertsButtonActionPerformed
        updateFoundImage();
        repaintImage();
    }//GEN-LAST:event_robertsButtonActionPerformed

    private void fomAlphaFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fomAlphaFieldFocusLost
        updateErrorFields();
    }//GEN-LAST:event_fomAlphaFieldFocusLost

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
//        thresholdSlider.setToolTipText("" + thresholdSlider.getValue());
//        Point locationOnScreen = MouseInfo.getPointerInfo().getLocation();
//        Point locationOnComponent = new Point(locationOnScreen);
//        SwingUtilities.convertPointFromScreen(locationOnComponent, thresholdSlider);
//        if(thresholdSlider.contains(locationOnComponent)) {
//            ToolTipManager.sharedInstance().mouseMoved(new MouseEvent(thresholdSlider, -1, System.currentTimeMillis(), 0, locationOnComponent.x, locationOnComponent.y, locationOnScreen.x, locationOnScreen.y, 0, false, 0));
//        }
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void thresholdSliderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thresholdSliderMouseEntered
//        ToolTipManager.sharedInstance().setInitialDelay(0);
    }//GEN-LAST:event_thresholdSliderMouseEntered

    private void thresholdSliderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thresholdSliderMouseExited
//        ToolTipManager.sharedInstance().setInitialDelay(defaultInitialDelay);
    }//GEN-LAST:event_thresholdSliderMouseExited

    private void cutFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cutFieldFocusLost
        
        if(Double.parseDouble(cutField.getText()) <= Double.parseDouble(cltField.getText()))
        {
            updateFoundImage();
            repaintImage();
        }
    }//GEN-LAST:event_cutFieldFocusLost

    private void cltFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cltFieldFocusLost
        
        if(Double.parseDouble(cutField.getText()) <= Double.parseDouble(cltField.getText()))
        {
            updateFoundImage();
            repaintImage();
        }
    }//GEN-LAST:event_cltFieldFocusLost

    private void thresholdSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_thresholdSliderMouseReleased
        updateThresholdImage();
        repaintImage();
    }//GEN-LAST:event_thresholdSliderMouseReleased

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_doneButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        set = false;
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Project2GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Project2GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Project2GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Project2GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                Project2GUI dialog = new Project2GUI(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup EDSelectionGroup;
    private javax.swing.JRadioButton LoGButton;
    private javax.swing.JLabel alphaLabel;
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton cannyButton;
    private javax.swing.JTextField cltField;
    private javax.swing.JLabel cltLabel;
    private javax.swing.JTextField cutField;
    private javax.swing.JLabel cutLabel;
    private javax.swing.JButton doneButton;
    private javax.swing.JTextField fomAlphaField;
    private javax.swing.JTextField fomField;
    private javax.swing.JLabel fomLabel;
    private GUI.JImageScrollPane foundDisplay;
    private GUI.JImageScrollPane idealDisplay;
    private javax.swing.JRadioButton prewittsButton;
    private javax.swing.JTextField rmsField;
    private javax.swing.JLabel rmsLabel;
    private javax.swing.JRadioButton robertsButton;
    private javax.swing.JRadioButton sobelButton;
    private javax.swing.JSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables
}
