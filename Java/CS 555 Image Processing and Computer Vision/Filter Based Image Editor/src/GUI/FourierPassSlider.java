/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import P1Filters.FourierPassFilters;
import Utilities.DFTObj;
import Utilities.RGBPixelArray;
import Utilities.OpenCV;
import java.awt.Dimension;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
/**
 *
 * @author Matthew Lai
 */
public class FourierPassSlider extends javax.swing.JDialog {

    private final FourierPassFilters parent;
    private RGBPixelArray transformed, filter;
    private final int defaultDismissTimout;
    private final int defaultInitialDelay;
    private final int preferredHeight;
    MouseScrollingHandler linkedScroller;
    final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    
    /**
     * Creates new form FourierPassSlider
     */    
    public FourierPassSlider(DFTObj dftObj, FourierPassFilters parentFilter) {
        super();
        this.parent = parentFilter;
        transformed = OpenCV.DFTMagnitudeImage(dftObj);
        defaultDismissTimout = ToolTipManager.sharedInstance().getDismissDelay();
        defaultInitialDelay = ToolTipManager.sharedInstance().getInitialDelay();
        linkedScroller = new MouseScrollingHandler();
        
        filter = ImageProcessor.ImageUtilities.getRGBArray(
                ImageProcessor.ImageUtilities.getBufferedImage(
                        ImageProcessor.ImageUtilities.normalize(parent.generateFilter(transformed.getLength(), transformed.getWidth(), 0, 0, 1), 8)));
        initComponents();
        
//        modSlider.setMaximum((int)Math.ceil(Math.sqrt(Math.pow(transformed.getWidth()/2,2) + Math.pow(transformed.getLength()/2, 2))));
        modSlider.setMaximum(100);
        
        updateFilterImage();
        
        linkedScroller.addNewPaneToLinkedMouseScrolling(transformScrollPane);
        linkedScroller.addNewPaneToLinkedMouseScrolling(filterScrollPane);
        
        repaintImage();
        
        preferredHeight = this.getHeight();
        this.setPreferredSize(new Dimension(screenSize.width-20,this.getHeight()));
        this.setMaximumSize(new Dimension(screenSize.width-20,this.getHeight()));
        this.setSize(new Dimension(screenSize.width-20,this.getHeight()));
        
        updateSliderToolTip();
        repaintImage();
    }//GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(scaledImage));
    
    private void updateFilterImage()
    {
        double mod = getSliderValue();
        int hL = 0;
        int iG = 0;
        if(lowButton.isSelected()) hL = 1;
        if(gaussButton.isSelected()) iG= 1;
//        filter = ImageProcessor.ImageUtilities.getRGBArray(
//                ImageProcessor.ImageUtilities.getBufferedImage(
//                        ImageProcessor.ImageUtilities.normalize(parent.generateFilter(transformed.getLength(), transformed.getWidth(), hL, iG, mod), 8)));
        filter = new RGBPixelArray(ImageProcessor.ImageUtilities.normalize(parent.generateFilter(transformed.getLength(), transformed.getWidth(), hL, iG, mod), 8));
        
    }
    
    private void repaintImage()
    {
        filterScrollPane.getImagePanel().changeImage(filter);
        filterScrollPane.repaint();
    }
    
    private void updateSliderToolTip()
    {
        modSlider.setToolTipText("Test: " + getSliderValue());
    }
    
    public RGBPixelArray getFilterImage()
    {
        return filter;
    }
    
    private int getSliderValue()
    {
        int maxValue = (int)Math.ceil(Math.sqrt(Math.pow(transformed.getWidth()/2,2) + Math.pow(transformed.getLength()/2, 2)));
        int value = modSlider.getValue();
        int threshold = (int)(Math.round((maxValue * 0.03)/10)*10);
        if(value <= threshold) return value;
        int retValue = (int)(Math.round((((double)(value-threshold)/(double)(100-threshold))*(double)maxValue)/10)*10) + threshold;
        if(retValue > maxValue) retValue = maxValue;
        return retValue;
//        return modSlider.getValue();
    }
    
    public double[][] getFilter()
    {
        double mod = getSliderValue();
        int hL = 0;
        int iG = 0;
        if(lowButton.isSelected()) hL = 1;
        if(gaussButton.isSelected()) iG= 1;
        return parent.generateFilter(transformed.getLength(), transformed.getWidth(), hL, iG, mod);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        highLowGroup = new javax.swing.ButtonGroup();
        idealGaussGroup = new javax.swing.ButtonGroup();
        transformScrollPane = GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(transformed));
        filterScrollPane = GUIUtilities.getScrollWindow(GUIUtilities.getImagePanel(filter));
        doneButton = new javax.swing.JButton();
        highButton = new javax.swing.JRadioButton();
        lowButton = new javax.swing.JRadioButton();
        idealButton = new javax.swing.JRadioButton();
        gaussButton = new javax.swing.JRadioButton();
        modSlider = new javax.swing.JSlider();
        modLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModal(true);
        setName("FourierPassSlider"); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        highLowGroup.add(highButton);
        highButton.setText("High Pass Filter");
        highButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highButtonActionPerformed(evt);
            }
        });

        highLowGroup.add(lowButton);
        lowButton.setSelected(true);
        lowButton.setText("Low Pass Filter");
        lowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowButtonActionPerformed(evt);
            }
        });

        idealGaussGroup.add(idealButton);
        idealButton.setSelected(true);
        idealButton.setText("Ideal Filter");
        idealButton.setToolTipText("Test");
        idealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idealButtonActionPerformed(evt);
            }
        });

        idealGaussGroup.add(gaussButton);
        gaussButton.setText("Gaussian Filter");
        gaussButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussButtonActionPerformed(evt);
            }
        });

        modSlider.setMinimum(1);
        modSlider.setValue(10);
        modSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                modSliderStateChanged(evt);
            }
        });
        modSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modSliderMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                modSliderMouseExited(evt);
            }
        });

        modLabel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        modLabel.setText("Radius");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(doneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 605, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(highButton)
                    .addComponent(lowButton))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gaussButton)
                    .addComponent(idealButton))
                .addGap(208, 208, 208)
                .addComponent(modLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(transformScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(doneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(highButton)
                                    .addComponent(idealButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lowButton)
                                    .addComponent(gaussButton))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(modLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(modSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addComponent(transformScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idealButtonActionPerformed
        modLabel.setText("Radius");
        //Change Slider Scale
        updateFilterImage();
        repaintImage();
    }//GEN-LAST:event_idealButtonActionPerformed

    private void gaussButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussButtonActionPerformed
        modLabel.setText("StDev");
        // Change Slider Scale
        updateFilterImage();
        repaintImage();
    }//GEN-LAST:event_gaussButtonActionPerformed

    private void modSliderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modSliderMouseEntered
        ToolTipManager.sharedInstance().setInitialDelay(0);
    }//GEN-LAST:event_modSliderMouseEntered

    private void modSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_modSliderStateChanged
        updateSliderToolTip();
        Point locationOnScreen = MouseInfo.getPointerInfo().getLocation();
        Point locationOnComponent = new Point(locationOnScreen);
        SwingUtilities.convertPointFromScreen(locationOnComponent, modSlider);
        if(modSlider.contains(locationOnComponent)) {
            ToolTipManager.sharedInstance().mouseMoved(new MouseEvent(modSlider, -1, System.currentTimeMillis(), 0, locationOnComponent.x, locationOnComponent.y, locationOnScreen.x, locationOnScreen.y, 0, false, 0));
        }
        
        updateFilterImage();
        repaintImage();
    }//GEN-LAST:event_modSliderStateChanged

    private void modSliderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modSliderMouseExited
        ToolTipManager.sharedInstance().setInitialDelay(defaultInitialDelay);
    }//GEN-LAST:event_modSliderMouseExited

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        setSize(new Dimension(getWidth(), preferredHeight));
    }//GEN-LAST:event_formComponentResized

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_doneButtonActionPerformed

    private void highButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highButtonActionPerformed
        updateFilterImage();
        repaintImage();
    }//GEN-LAST:event_highButtonActionPerformed

    private void lowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowButtonActionPerformed
        updateFilterImage();
        repaintImage();
    }//GEN-LAST:event_lowButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doneButton;
    private GUI.JImageScrollPane filterScrollPane;
    private javax.swing.JRadioButton gaussButton;
    private javax.swing.JRadioButton highButton;
    private javax.swing.ButtonGroup highLowGroup;
    private javax.swing.JRadioButton idealButton;
    private javax.swing.ButtonGroup idealGaussGroup;
    private javax.swing.JRadioButton lowButton;
    private javax.swing.JLabel modLabel;
    private javax.swing.JSlider modSlider;
    private GUI.JImageScrollPane transformScrollPane;
    // End of variables declaration//GEN-END:variables
}
